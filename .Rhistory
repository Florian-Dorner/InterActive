scores <-c (80,95, 70, 90, 95, 85, 95,75)
num <-length(scores)
best <- max(scores)
id[scores == best]
id <- 1:num
id[scores == best]
(1:length(scores))[scores == max(scores}]
(1:length(scores))[scores == max(scores)]
y = <- c (3, 2, NA, 7, 1 NA, 5)
y <- c (3, 2, NA, 7, 1 NA, 5)
y <- c (3, 2, NA, 7, 1, NA, 5)
y[is.na(y)] <- 0
y
v <- c (“Alex” ,“Johnson”)
names(v) <- c(“first”, “last”)
v <- c(“Alex” ,“Johnson”)
v <- c("Alex," "Johnson")
v <- c("Alex", "Johnson")
names(v) <- c("first", "last")
names
v
install.packages("swirl")
library("swirl")
ls()
rm(list=ls())
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
c(1.1, 9, 3.14)
z<- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2 +100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4) +c(0,10.100)
c(1,2,3,4) +c(0,10,100)
z*2 +1000
my_div
swirl
swirl()
mydata
mydata = read.csv("~/Downloads/YLdataread/ascii/YLtask2_151112")
mydata
mydata = read.csv("~/Downloads/YLdataread/ascii/YLtask2_151112")
mydata
mydata = read.csv("~/Documents/HOME_study/YLdataread/ascii/YLtask2_151112.csv)
mydata
()
mydata = read.csv("~/Documents/HOME_study/YLdataread/ascii/YLtask2_151112.csv")
mydata
mydata = read.csv("YLdataread/ascii/YLtask2_151112.csv")
"~/Documents/HOME_study/
mydata = read.csv("YLdataread/ascii/YLtask2_151112.csv")
mydata = read.csv("~/Documents/HOME_study/YLdataread/ascii/YLtask2_151112.csv")
mydata
mydata <- read.csv(file ="~/Documents/HOME_study/YLdataread/ascii/YLtask2_151112.csv", head=TRUE, sep=",")
mydata
?c()
?c()
obj<-"A"
obj
?rbind()
obj<-c("A","B")
obj
?c()
obj[1]
obj[2]
obj1<-c("A","B","C")
obj2<-c(1,2,3)
class(obj1)
class(obj2)
typeof(obj1)
typeof(obj2)
obj.table<-rbind(obj1,obj2)
obj.table
obj.table
class(obj.table)
class(obj.table)
test <-- rbind(obj2, obj2)
test
obj1<-c("A","B","C")
obj2<-c(1,2,3)
test <-- rbind(obj2, obj2)
class(obj.table)
test
obj2
test <-- rbind(obj2,obj2)
test
obj2
rbind(obj2,obj2)
test <-rbind(obj2,obj2)
test
obj2[2,2]
obj2
obj.table[2,2]
obj.table[-1]
obj.table[2,]
obj.table[,2]
obj.table[,-2]
obj.table[-1,-2]
cbind(obj1,obj2)
a<-rep(NA,5)
a
anyting <-rep(NA,5)
anything
anything <-rep(NA,5)
anything
table<-rbind(a,a,a,a,a)
table1
table
rownames(table1) <- c("R1","R2","R3","R4","R5")
table1<-rbind(a,a,a,a,a)
table1
rownames(table1) <- c("R1","R2","R3","R4","R5")
colnames(table1) <- c("C1","C2","C3","C4","C5")
table1
table1[1,1]<-1
table1[2,1]<-2
table1
testmatrix<-matrix(NA,nrow=5, ncol=5)
testmatrix
list1<-vector("list",5)
list1
names(list1)<-c("fruits","vegetables","numbers","obj.table")
list1
names(list1)#Quiz: why is there an NA at the end of my list object?
list1[["fruits"]]<-c("apples","oranges")
list1[["vegetables"]]<-c("broccoli","carrots","tomatoes?")
list1[["numbers"]]<-seq(1:100)
list1[["obj.table"]]<-obj.table
list1$fruits
list1$numbers
list1$obj.table
list1$obj.table,fruits
paste0(c(list1$obj.table, list$fruits))
paste0(c(list1$obj.table,list$fruits))
list1
c(list1$fruits,list1$vegetab
zxcnkzxc
c(list1$fruits,list1$vegetables)
list1$somethingnew<-"test"
list1$somethingnew<-"test"
list1$somethingnew<-"test"
list1$somethingnew<-"test"
list1$somethingnew<-"test"
list1$somethingnew
prolist<-vector("list")
prolist$fruits<-c("apples","oranges")
prolist$vegetables<-c("broccoli","carrots","tomatoes?")
prolist
sapply(list1,class)
sapply(data,class)
example(lm)
lm.D9
lm.D9[1]
lm.D9[2]
lm.D9[13]
names(lm.D9)
lm.D(
adsjf
ldskfhalsdjfa
lm.D9
lm.D9$coefficients
lm.D9$fitted.values
install.packages("readr")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
install.packages("readr")
install.packages("Readr")
options(scipen=20)
options(digits=4)
install.packages("readr")
available.packages(
)
install.packages("readr")
install.packages("readr")
b <- c(14, 18, 13, 18, 19)
b
mean(b)
mean(b, na.rm=TRUE)
mean.cm <- function(arg){
mean<-sum(arg)/(length(arg))
return(mean)
}
mean.cm <-function(arg){
mean.cm <- function(arg){
+     mean<-sum(arg)/(length(arg))
+     return(mean)
+ }
mean.cm <- function(arg){
mean<-sum(arg)/(length(arg))
return(mean)
}
mean.cm <- function(areg){            ####arg can actually be anything
mean<-sum(areg)/(length(areg))
return(mean)
}
mean.cm(c(1,2,3,4,5)
)
mean.cm
mean.cm <- function(arg){            ####arg can actually be anything
mean<-sum(arg, na.rm = TRUE)/(na.omit(length(arg))### better to remove NAs in the function iteslf from both sum and length
return(mean)
}
mean.cm <- function(arg){            ####arg can actually be anything
mean<-sum(arg, na.rm = TRUE)/(na.omit(length(arg)))### better to remove NAs in the function iteslf from both sum and length
return(mean)
}
mean.cm(c(2,3,NA,5,6,7)
)
mean.cm(b)==mean(b, na.rm = T)
center<-function(MOD) ### USE SCALE TO STANDARDIZE. But this is just to mean center
{
centered<-MOD-mean(MOD, na.rm = TRUE)
return(centered)
}
scale
scale(b)
?scale()
scale(b, scale = FALSE)
center(b) #This shows my new scores.
#Now the fun part: if I take the mean of my center(b), what will it "b"?
mean(center(b))
#Even though we're punishing scientific notation, we can still do better. This is not quite zero due to rounding error. I can use the round() function to make this a little cleaner.
round(mean(center(b),na.rm = TRUE),3) #Round to 3 delcimal places
probe.low<-function(MOD)
{
low<-(MOD-mean(MOD, na.rm = TRUE))+sd(MOD, na.rm = TRUE)
return(low)
}
probe.low(b)
probe.high(b)
probe.high<-function(MOD)
{
high<-(MOD-mean(MOD, na.rm =TRUE))-sd(MOD, na.rm = TRUE)
return(high)
}
probe.high(b)
mean(probe.low(b))
mean(probe.high(b))
sd(b)
source("/Users/mayarosen/Dropbox/R Workshop Materials - McLaughlin Lab/Connor_R_Functions.R")
install.packages(c("psych","foreign","QuantPsyc", "Hmisc", "ggplot2"))
setwd("/Users/mayarosen/Dropbox/R Workshop Materials - McLaughlin Lab/Workshop Day 1 - Fundamentals")
data<-"CSHS_Asym_12.28.13.csv"
cshs<-read.csv(data,header=TRUE) #read it in
View(cshs)
cshs<-read_csv(data,header=TRUE) #read it in a slightly better way
require(readr)
cshs<-read_csv(data,header=TRUE) #read it in a slightly better way
cshs<-read_csv(data,header=TRUE) #read it in a slightly better way
cshs<-read_csv(data) #read it in a slightly better way
View(cshs)
psych::describe(cshs)
cshs[cshs==9999]<-NA
psych::describe(cshs)
cshs$age[cshs$age>=99]<-NA
cshs$gen[cshs$gen>=99]<-NA
psych::describe(cshs)
hist(cshs$ss)
table(cshs$ss)
table(cshs$age)
cshs$age.factor<-factor(cshs$age, #age.factor is the age variable, but as a factor.
levels = c(1,2,3,4,5,6,7,8), #this can assume the values of integer 1 through 8.
labels = c("18","19","20","21","22","23","24","25")) #respectively, these actually refer to ages 18 through 25.
mean(cshs$age.factor, na.rm = TRUE)
cshs$age.f.numeric<-as.numeric(cshs$age.factor)
mean(cshs$age.f.numeric,na.rm=TRUE)
View(cshs)
cshs$agetrue[cshs$age==1]<-18
cshs$agetrue[cshs$age==2]<-19
cshs$agetrue[cshs$age==3]<-20
cshs$agetrue[cshs$age==4]<-21
cshs$agetrue[cshs$age==5]<-22
cshs$agetrue[cshs$age==6]<-23
cshs$agetrue[cshs$age==7]<-24
View(cshs)
sort(unique(na.omit(csh$age))
require('Hmisc')
require('Hmisc')
label(cshs$age)<-"What is your age?"
label(cshs$gen)<-"Gender"
label(cshs$aa)<-"Ethnicity (Asian-American vs. Non-AA)"
label(cshs$ss)<-"UPPS Sensation Seeking"
label(cshs$pre)<-"UPPS planfulness"
label(cshs$negcon)<-"Experiencing negative consequences as a result of drinking (count)"
View(cshs)
require(foreign)
data.spss<-"cshsspss.sav" #define our dataset
cshs.spss<-foreign::read.spss(data.spss, to.data.frame=T) #read it in
View(cshs.spss)
table(cshs.spss$age)
class(cshs.spss$age)
cshs.spss$age<-as.numeric(cshs.spss$age)
cshs.spss$gen<-as.numeric(cshs.spss$gen)
cshs.spss$aa<-as.numeric(cshs.spss$aa)
is.factor(cshs.spss$age)
psych::describe(cshs.spss)
model.negcon <- negcon ~ age + gen + aa + pre + ss + pre*ss
vars.negcon<-c("age","gen","aa","ss","pre","negcon")
cshs.negcon<-cshs[vars.negcon]
psych::describe(cshs.negcon)
cshs.negcon.na<-na.omit(cshs.negcon)
psych::describe(cshs.negcon.na)
cshs.negcon<-na.omit(cshs[vars.negcon])
psych::describe(na.omit(read.csv("CSHS_Asym_12.28.13.csv",header=TRUE))[c("age","gen","aa","ss","pre","negcon")])
nrow(na.omit(read.csv("CSHS_Asym_12.28.13.csv",header=TRUE))[c("age","gen","aa","ss","pre","negcon")])
psych::describe(na.omit(read.csv("CSHS_Asym_12.28.13.csv",header=TRUE))[c("age","gen","aa","ss","pre","negcon")])
nrow(na.omit(read.csv("CSHS_Asym_12.28.13.csv",header=TRUE))[c("age","gen","aa","ss","pre","negcon")])
cor(cshs.negcon)
cov(cshs.negcon)
cor(cshs.negcon, use = "complete.obs")
cor(cshs.negcon$ss,cshs.negcon$pre)
cor(cshs.negcon[c("ss","pre","negcon")])
cov(cshs.negcon[c("ss","pre","negcon")])
cshs.negcon.prelo<-cshs.negcon[which(cshs.negcon$pre<mean(cshs.negcon$pre)),]
cshs.negcon.prehi<-cshs.negcon[which(cshs.negcon$pre>=mean(cshs.negcon$pre)),]
cshs.negcon.prelo.whichnot<-cshs.negcon[which(!cshs.negcon$pre>=mean(cshs.negcon$pre)),]
cshs.negcon.prelo==cshs.negcon.prelo.whichnot
nrow(cshs.negcon.prelo)
nrow(cshs.negcon.prehi)
nrow(cshs.negcon.prelo) + nrow(cshs.negcon.prehi)==nrow(cshs.negcon)
attach(cshs.negcon)
cshs.negcon$pre
pre
detach(cshs.negcon)
cshs.negcon$ssXpre.NEM<-cshs.negcon$pre*cshs.negcon$ss
cor(cshs.negcon[c("c.ss","c.pre","ssXpre","ssXpre.NEM")])
data<-"GRE_data.csv" #define our dataset
#Here is what you will learn about in this tutorial:
?c()
?rbind()
?cbind()
?rep()
?length()
obj<-"A"
obj
obj<-c("A","B")
obj
obj<-("A","B")
obj<-c("A","B")
obj[1]
obj[2]
obj1<-c("A","B","C")
obj2<-c(1,2,3)
#note that obj1 and obj2 are of different classes and types. this can be checked with class() and typeof(), respectively.
class(obj1)
obj2<-c(1,2,3)
class(obj2)
typeof(obj1)
typeof(obj2)
as.character(obj2)
as.factor(obj2)
?class
class(obj2)
#r in rbind is for rows
obj.table<-rbind(obj1,obj2)
#r in rbind is for rows
obj.table<-rbind(obj1,obj2)
obj.table
obj1<-c("A","B")
#r in rbind is for rows
obj.table<-rbind(obj1,obj2)
obj.table
example(lm)
lm.D9
lm.D90
lm.D9$coefficients
require(QuantPsyc)
lm.beta(lm.D9)
obj.table
obj.table[2,2]
obj.table[2]
obj.table[1]
obj.table[2]
obj.table[3]
obj.table[2,]
obj.table
obj.table[,2]
obj.table[-1,-2] #Omits the first row AND second column, returns the rest
obj.table
obj.table[-1,-2] #Omits the first row AND second column, returns the rest
something<-obj.table[-1,-2] #Omits the first row AND second column, returns the rest
something
obj.table
obj.table
something
stand.vals<-lm.beta(lm.D9)
unstand.vals<-lm.D9$coefficients
stand.vals
unstand.vals
gre<-read.csv("/Users/cmccabe/Dropbox/Regression_2018/GRE_data.csv")
View(gre)
verbal<-gre[,1]
verbal
quant<-gre[,2]
verbal<-gre[,1]
quant<-gre[,2]
lm(verbal~quant)
obj2
obj3<-c(obj2,"Male","female")
obj3
obj3
obj3[2,]<-rep(1,5)
obj3[2,]
obj3[2,]<-a
library(shiny); runApp('~/Dropbox/InterActive Project/OLS_AMPPS/interActive_OLS_app_v4.0/interActive_OLS_app_v4.2.R')
runApp('~/Dropbox/InterActive/interActive_OLS_app_v4.2.R')
runApp('~/Dropbox/InterActive/interActive_OLS_app_v4.3.R')
runApp('~/Dropbox/InterActive/interActive_OLS_app_v4.3.R')
runApp('~/Dropbox/InterActive/interActive_OLS_app_v4.3.R')
runApp('~/Dropbox/InterActive/interActive_OLS_app_v4.3.R')
runApp('~/Dropbox/InterActive/interActive_OLS_app_v4.3.R')
